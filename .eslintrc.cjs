module.exports = {
  root: true,
  env: {
    node: true,
    browser: true,
  },
  plugins: [
    'simple-import-sort',
    'react',
    '@typescript-eslint',
  ],
  extends: [
    'eslint:recommended',
    'plugin:react-hooks/recommended',
    'plugin:react/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: ['./tsconfig.json'],
    ecmaVersion: 'latest',
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
      legacyDecorators: true,
    }
  },
  rules: {
    indent: ['error', 2],
    semi: ['error', 'never'],
    quotes: ['error', 'single'],
    'no-unused-vars': 2,
    'max-classes-per-file': ['error', 1],
    'arrow-parens': 2,
    'no-sequences': 2,
    'prefer-arrow-callback': 2,
    'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0,
    'rest-spread-spacing': ['error', 'never'],
    'default-param-last': 2,
    'func-call-spacing': 2,
    'keyword-spacing': 2,
    'key-spacing': ['error', {
      'afterColon': true,
      'beforeColon': false
      }
    ],
    'implicit-arrow-linebreak': ['error', 'beside'],
    'space-before-blocks': ['error', {
      'functions': 'always',
      'keywords': 'always',
      'classes': 'always',
    }],
    'space-unary-ops': ['error', {'words': false, 'nonwords': false}],
    'space-infix-ops': 2,
    'space-in-parens': ['error', 'never'],
    'space-before-function-paren': ['error', 'never'],
    'newline-after-var': ['error', 'always'],
    'newline-before-return': 2,
    // 'array-callback-return': 2,
    'newline-per-chained-call': ['error', {ignoreChainWithDepth: 2}],
    'function-paren-newline': ['error', 'consistent'],
    'function-call-argument-newline': ['error', 'consistent'],
    'dot-location': ['error', 'property'],
    // Ignore because we override this rule in typescript section
    // 'dot-notation': 2,
    'init-declarations': 2,
    'array-element-newline': ['error', { multiline: true, minItems: 3 }],
    'array-bracket-newline': ['error', { minItems: 3 }],
    'arrow-spacing': ['error', { 'before': true, 'after': true }],
    'arrow-body-style': ['error', 'as-needed'],
    'brace-style': ['error', 'stroustrup'],
    'comma-dangle': ['error', 'always-multiline'],
    'padding-line-between-statements': ['error',
      {blankLine: 'always', prev: '*', next: 'if'},
      {blankLine: 'always', prev: 'function', next: '*'},
      {blankLine: 'always', prev: 'block', next: '*'},
      {blankLine: 'always', prev: 'if', next: '*'},
      {blankLine: 'always', prev: 'try', next: '*'},
      {blankLine: 'always', prev: 'for', next: '*'},
      {blankLine: 'always', prev: 'switch', next: '*'},
      {blankLine: 'always', prev: 'block-like', next: '*'},
      {blankLine: 'always', prev: 'multiline-block-like', next: '*'},
      {blankLine: 'always', prev: '*', next: 'throw'},
      {blankLine: 'any', prev: 'import', next: '*'},
      {blankLine: 'always', prev: '*', next: 'class'},
      {blankLine: 'always', prev: '*', next: 'break'},
      {blankLine: 'always', prev: '*', next: 'continue'},
    ],
    'max-len': ['error', 100],
    'linebreak-style': ['error', 'unix'],
    'new-parens': ['error', 'always'],
    'max-statements-per-line': ['error', {max: 1}],
    'no-mixed-spaces-and-tabs': 2,
    'no-multi-spaces': 2,
    'no-tabs': 2,
    'grouped-accessor-pairs': ['error', 'getBeforeSet'],
    'no-multiple-empty-lines': ['error', {max: 1}],
    'no-trailing-spaces': 2,
    'multiline-ternary': ['error', 'always-multiline'],
    'no-whitespace-before-property': 2,
    'nonblock-statement-body-position': ['error', 'below'],
    'operator-linebreak': ['error', 'before'],
    'padded-blocks': ['error', 'never'],
    'no-array-constructor': 2,
    'object-curly-spacing': ['error', 'always'],
    'object-curly-newline': ['error', {
      'ObjectExpression': { 'multiline': true, minProperties: 3 },
      'ObjectPattern': { 'multiline': true, minProperties: 3 },
      'ImportDeclaration': { 'multiline': true, minProperties: 4 },
      'ExportDeclaration': { 'multiline': true, minProperties: 2 }
    }],
    'no-else-return': 2,
    'object-property-newline': ['error', { allowAllPropertiesOnSameLine: false }],
    'no-console': 1,
    'new-cap': ['error', {
      newIsCap: true,
      capIsNew: false,
    }],
    'no-alert': 2,
    'no-bitwise': 2,
    'no-caller': 2,
    'no-empty-function': 2,
    'no-eq-null': 2,
    'no-eval': 2,
    'no-extend-native': 2,
    'no-extra-bind': 2,
    'no-extra-boolean-cast': 2,
    'no-extra-label': 2,
    'no-floating-decimal': 2,
    'no-global-assign': 2,
    'no-implicit-coercion': 2,
    'no-implied-eval': 2,
    'no-inline-comments': 2,
    'no-invalid-this': 2,
    'no-iterator': 2,
    'no-label-var': 2,
    'no-lone-blocks': 2,
    'no-lonely-if': 2,
    'no-loop-func': 2,
    'block-scoped-var': 2,
    // 'class-methods-use-this': 2,
    'no-magic-numbers': ['error' , {
      ignoreArrayIndexes: true,
      enforceConst: true,
      ignore: [-1, 0, 1]
    }],
    'no-mixed-operators': 2,
    'no-multi-assign': 2,
    'no-multi-str': 2,
    'no-negated-condition': 2,
    'no-nested-ternary': 2,
    'no-new': 2,
    'no-new-func': 2,
    'no-new-object': 2,
    'no-new-wrappers': 2,
    'no-octal-escape': 2,
    'no-param-reassign': 2,
    'no-proto': 2,
    'no-regex-spaces': 2,
    'no-return-assign': 2,
    'no-return-await': 2,
    'no-script-url': 2,
    'no-restricted-syntax': [
      'error',
      'SequenceExpression',
      'WithStatement',
      'BinaryExpression[operator=\'in\']'
    ],
    'no-shadow': ['error', { 'builtinGlobals': false, 'hoist': 'functions', 'allow': [] }],
    'no-throw-literal': 2,
    'no-undef-init': 2,
    'no-undefined': 2,
    'no-underscore-dangle': 2,
    'no-unneeded-ternary': 2,
    'no-unused-expressions': 2,
    'no-unused-labels': 2,
    'no-useless-call': 2,
    'no-useless-catch': 2,
    'no-useless-computed-key': 2,
    'no-useless-concat': 2,
    'no-useless-constructor': 2,
    'no-useless-rename': 2,
    'no-useless-return': 2,
    'no-var': 2,
    'no-void': 2,
    'no-with': 2,
    'no-warning-comments': 2,
    'object-shorthand': ['error', 'always'],
    'one-var': ['error', 'never'],
    'one-var-declaration-per-line': 2,
    'operator-assignment': 2,
    'prefer-exponentiation-operator': 2,
    'prefer-named-capture-group': 2,
    'prefer-numeric-literals': 2,
    'prefer-object-spread': 2,
    'prefer-promise-reject-errors': 2,
    'prefer-regex-literals': 2,
    'prefer-rest-params': 2,
    'prefer-spread': 2,
    'prefer-template': 2,
    'quote-props': ['error', 'as-needed'],
    'radix': 2,
    // 'require-await': 2,
    'require-unicode-regexp': 2,
    'spaced-comment': 2,
    'symbol-description': 2,
    'vars-on-top': 2,
    'yoda': 2,
    'no-await-in-loop': 2,
    'no-constructor-return': 2,
    // 'no-duplicate-imports': 2,
    // need update eslint
    // 'no-promise-executor-return': 2,
    'no-self-compare': 2,
    'no-template-curly-in-string': 2,
    'no-unmodified-loop-condition': 2,
    // need update eslint
    // 'no-unreachable-loop': 2,
    // 'no-unused-private-class-members': 2,
    'no-use-before-define': 2,
    'require-atomic-updates': 2,
    curly: ['error', 'all'],


    // imports
    "simple-import-sort/imports": ['error', {
      groups: [
        // Node.js builtins prefixed with `node:`.
        ["^node:"],
        ["^\\u0000"],
        ["^"],
        ["^@?\/domain"],
        ["^@?\/application"],
        ["^@?\/infrastructure"],
        ["^@?\/ui"],
        ["^\\."],
      ]}
    ],

    // react
    'react/react-in-jsx-scope': 'off',

    // typescript

    '@typescript-eslint/ban-tslint-comment': 2,
    '@typescript-eslint/consistent-indexed-object-style': ['error', 'record'],
    '@typescript-eslint/consistent-type-assertions': 2,
    '@typescript-eslint/consistent-type-imports': ['error', {
       prefer: 'type-imports',
    }],
    '@typescript-eslint/array-type': ['error', {
      default: 'generic',
      readonly: 'generic',
    }],
    '@typescript-eslint/class-literal-property-style': ['error', 'fields'],
    '@typescript-eslint/explicit-member-accessibility': ['error', {
      accessibility: 'no-public',
    }],
    '@typescript-eslint/explicit-module-boundary-types': 2,
    '@typescript-eslint/member-delimiter-style': ['error', {
      multiline: {
        delimiter: 'none',
      },
      singleline: {
        delimiter: 'comma',
      },
    }],
    '@typescript-eslint/member-ordering': 2,
    '@typescript-eslint/method-signature-style': ['error', 'method'],
    '@typescript-eslint/naming-convention': ['error',
      {
        selector: 'default',
        format: ['camelCase', 'PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'parameterProperty',
        format: ['camelCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'objectLiteralProperty',
        format: ['camelCase', 'snake_case', 'PascalCase'],
        leadingUnderscore: 'allow',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'typeProperty',
        format: ['camelCase', 'snake_case', 'PascalCase'],
        leadingUnderscore: 'allow',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'classProperty',
        format: ['camelCase'],
        leadingUnderscore: 'allow',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'enumMember',
        format: ['UPPER_CASE'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'variable',
        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      },
      {
        selector: 'typeLike',
        format: ['PascalCase'],
        leadingUnderscore: 'forbid',
        trailingUnderscore: 'forbid',
      }],
    '@typescript-eslint/no-explicit-any': 2,
    '@typescript-eslint/no-base-to-string': 2,
    '@typescript-eslint/no-confusing-non-null-assertion': 2,
    '@typescript-eslint/no-confusing-void-expression': 2,
    '@typescript-eslint/no-extraneous-class': 2,
    '@typescript-eslint/no-invalid-void-type': 2,
    '@typescript-eslint/no-meaningless-void-operator': 2,
    '@typescript-eslint/no-namespace': 2,
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 2,
    // '@typescript-eslint/no-parameter-properties': 2,
    '@typescript-eslint/no-require-imports': 2,
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 2,
    '@typescript-eslint/no-unnecessary-condition': 2,
    '@typescript-eslint/no-unnecessary-qualifier': 2,
    '@typescript-eslint/no-unnecessary-type-arguments': 2,
    '@typescript-eslint/non-nullable-type-assertion-style': 2,
    '@typescript-eslint/prefer-enum-initializers': 2,
    '@typescript-eslint/prefer-for-of': 2,
    '@typescript-eslint/prefer-includes': 2,
    '@typescript-eslint/prefer-literal-enum-member': 2,
    '@typescript-eslint/prefer-nullish-coalescing': 2,
    '@typescript-eslint/prefer-optional-chain': 2,
    '@typescript-eslint/prefer-readonly': 2,
    '@typescript-eslint/prefer-reduce-type-parameter': 2,
    '@typescript-eslint/prefer-regexp-exec': 2,
    '@typescript-eslint/prefer-return-this-type': 2,
    '@typescript-eslint/prefer-string-starts-ends-with': 2,
    '@typescript-eslint/prefer-ts-expect-error': 2,
    // '@typescript-eslint/promise-function-async': 2,
    '@typescript-eslint/require-array-sort-compare': 2,
    '@typescript-eslint/switch-exhaustiveness-check': 2,
    '@typescript-eslint/type-annotation-spacing': 2,
    '@typescript-eslint/typedef': 2,

    // extends eslint
    '@typescript-eslint/brace-style': ['error', 'stroustrup'],
    '@typescript-eslint/comma-dangle': ['error', 'always-multiline'],
    '@typescript-eslint/default-param-last': 2,
    '@typescript-eslint/dot-notation': ['error', {
      allowPrivateClassPropertyAccess: false,
      allowProtectedClassPropertyAccess: false,
      allowIndexSignaturePropertyAccess: true,
    }],
    '@typescript-eslint/func-call-spacing': 2,
    '@typescript-eslint/init-declarations': 2,
    '@typescript-eslint/keyword-spacing': 2,
    '@typescript-eslint/no-useless-constructor': 2,
    '@typescript-eslint/quotes': ['error', 'single'],
    '@typescript-eslint/no-unused-vars': 2,
    '@typescript-eslint/method-signature-style': ['error', 'property'],
    '@typescript-eslint/no-magic-numbers': ['error', {
      ignoreEnums: true,
      ignoreNumericLiteralTypes: true,
      ignoreReadonlyClassProperties: true,
      ignoreArrayIndexes: true,
      enforceConst: true,
      ignore: [0, 1, -1]
    }],
  },
  overrides: [
    {
      files: ['*.vue'],
      rules: {
        'class-methods-use-this': 0,
        'no-unused-vars': 0,
        'no-magic-numbers': 0
      }
    },
    {
      files: ['*.ts'],
      rules: {
        'no-unused-vars': 0,
        'quotes': 0,
        'no-magic-numbers': 0
      }
    }
  ],
}
